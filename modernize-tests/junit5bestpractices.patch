diff --git a/modernize-tests/pom.xml b/modernize-tests/pom.xml
index 086b9ac..ee90f74 100644
--- a/modernize-tests/pom.xml
+++ b/modernize-tests/pom.xml
@@ -16,12 +16,6 @@ org.openrewrite.java.testing.junit5.JUnit5BestPractices
 
     <dependencies>
         <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <version>4.12</version>
-            <scope>test</scope>
-        </dependency>
-        <dependency>
             <groupId>org.hamcrest</groupId>
             <artifactId>hamcrest</artifactId>
             <version>2.2</version>
diff --git a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/HamcrestTwo.java b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/HamcrestTwo.java
index 5132176..e2578e0 100644
--- a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/HamcrestTwo.java
+++ b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/HamcrestTwo.java
@@ -1,14 +1,14 @@ org.openrewrite.java.testing.junit5.JUnit5BestPractices
 package com.github.timtebeek.moneymaker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
 
-public class HamcrestTwo {
+class HamcrestTwo {
 
     @Test
-    public void testMoneyAmount() {
+    void testMoneyAmount() {
         Money money = MoneyMaker.makeMoney();
         assertThat(money, is(not(nullValue())));
         assertThat(money.amount, is(100.0f));
diff --git a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitFour.java b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitFour.java
index 1be7c23..5f19128 100644
--- a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitFour.java
+++ b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitFour.java
@@ -1,53 +1,55 @@ org.openrewrite.java.testing.junit5.JUnit5BestPractices
 package com.github.timtebeek.moneymaker;
 
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Timeout;
+import org.junit.jupiter.api.io.TempDir;
 
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class JUnitFour {
 
     @Test
-    public void testMoneyAmount() {
+    void testMoneyAmount() {
         Money money = MoneyMaker.makeMoney();
         assertNotNull(money);
         assertEquals(100.0f, money.amount, 0.0f);
     }
 
-    @Test(expected = ArithmeticException.class)
-    public void testDivideByZero() {
-        Money money = MoneyMaker.makeMoney();
-        float error = (int) money.amount / 0;
+    @Test
+    void testDivideByZero() {
+        assertThrows(ArithmeticException.class, () -> {
+            Money money = MoneyMaker.makeMoney();
+            float error = (int) money.amount / 0;
+        });
     }
 
-    @Test(timeout = 1000)
-    public void testTimeout() throws InterruptedException {
+    @Test
+    @Timeout(1000)
+    void testTimeout() throws InterruptedException {
         Thread.sleep(500);
     }
 
     @Test
-    public void testMoneyAmountWithMessage() {
+    void testMoneyAmountWithMessage() {
         Money money = MoneyMaker.makeMoney();
-        assertNotNull("Money should not be null", money);
-        assertEquals("Money amount should be 100.0f", 100.0f, money.amount, 0.0f);
+        assertNotNull(money, "Money should not be null");
+        assertEquals(100.0f, money.amount, 0.0f, "Money amount should be 100.0f");
     }
 
-    @Rule
-    public TemporaryFolder folder = new TemporaryFolder();
+    @TempDir
+    public File folder;
 
     @Test
-    public void testMoneyAmountWithMessageSupplier() throws Exception {
-        File file = folder.newFile("account.txt");
+    void testMoneyAmountWithMessageSupplier() throws Exception {
+        File file = File.createTempFile("account.txt", null, folder);
         Money money = MoneyMaker.makeMoney();
         Files.write(file.toPath(), String.valueOf(money.amount).getBytes());
         String read = new String(Files.readAllBytes(file.toPath()));
-        assertEquals("Money amount should be 100.0f", "100.0", read);
+        assertEquals("100.0", read, "Money amount should be 100.0f");
     }
 
 }
diff --git a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitThree.java b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitThree.java
index fe0f102..da96482 100644
--- a/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitThree.java
+++ b/modernize-tests/src/test/java/com/github/timtebeek/moneymaker/JUnitThree.java
@@ -1,10 +1,16 @@ org.openrewrite.java.testing.junit5.JUnit5BestPractices
 package com.github.timtebeek.moneymaker;
 
-public class JUnitThree extends junit.framework.TestCase {
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+class JUnitThree {
 
     // Look ma, no annotations!
     // The test prefix is enough.
-    public void testMoneyAmount() {
+    @Test
+    void testMoneyAmount() {
         Money money = MoneyMaker.makeMoney();
         // Nor static imports!
         assertNotNull(money);
